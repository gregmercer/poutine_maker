<?php
/**
 * @file
 *
 * Defines a custom field for constructing a custom poutine.
 */

require_once('poutine_maker.toppings.inc');

/**
 * Implements hook_field_info().
 */
function poutine_maker_field_info() {
  return array(
    'poutine_maker_poutine_maker' => array(
      'label' => t('Custom Poutine'),
      'description' => t('Custom Poutine Field'),
      'default_widget' => 'poutine_maker_poutine_maker_in',
      'default_formatter' => 'poutine_maker_poutine_maker_out',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function poutine_maker_field_formatter_info() {
  return array(
    'poutine_maker_poutine_maker_out' => array(
      'label' => t('Default'),
      'field types' => array('poutine_maker_poutine_maker'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function poutine_maker_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item) {
    $element[$delta] = poutine_maker_format_field($item);
  }
  return $element;
}

/**
 * Helper to render a single formatted entry
 */
function poutine_maker_format_field($item) {
  $element = array(
    '#type' => 'container',
    '#attributes' => array( 'class' => array( 'field-item') ),
    'text' => array(
      '#markup' => 'poutine_maker rendering not implemented',
    ),
  );
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function poutine_maker_field_widget_info() {
  return array(
    'poutine_maker_poutine_maker_in' => array(
      'label' => t('Default'),
      'field types' => array('poutine_maker_poutine_maker'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function poutine_maker_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $field_name = $instance['field_name'];
  $fieldset_info = element_info('fieldset');
  $process = array_merge($fieldset_info['#process'], array('poutine_maker_ignore_parent'));

  $item =& $items[$delta];
  $element += array(
    '#title' => t('Poutine'),
    '#type' => 'fieldset',
    '#delta' => $delta,
  );
  $element['name'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield',
    '#default_value' => isset($item['name']) ? $item['name'] : '',
  );
  $element['vegetarian'] = array(
    '#title' => t('Vegetarian'),
    '#type' => 'checkbox',
    '#default_value' => isset($item['vegetarian']) ? $item['vegetarian'] : '',
  );
  $element['toppings'] = array(
    '#title' => t('Toppings'),
    '#type' => 'fieldset',
    '#process' => $process,
  );
  foreach (poutine_maker_toppings('all') as $topping) {
    $topping_machine = _poutine_maker_make_machine_name($topping);
    $element['toppings'][$topping_machine] = array(
      '#title' => t($topping),
      '#type' => 'checkbox',
      '#default_value' => isset($item[$topping_machine]) ? $item[$topping_machine] : '',
    );
  }
  foreach (poutine_maker_toppings('meat') as $nonvegetarian_topping) {
    $topping_machine = _poutine_maker_make_machine_name($nonvegetarian_topping);
    $element['toppings'][$topping_machine]['#states'] = array(
      'visible' => array(
        _poutine_maker_make_jquery_selector($field_name, $langcode, $delta, 'vegetarian') =>
          array('checked' => FALSE),
      ),
    );
  }
  return $element;
}

function _poutine_maker_make_jquery_selector($field_name, $langcode, $delta, $item_name) {
  return ':input[name="' . $field_name . '[' . $langcode . '][' . $delta . '][' . $item_name . ']"], ' .
    ':input[name$="[' . $field_name . '][' . $langcode . '][' . $delta . '][' . $item_name . ']"]';
}

/**
 * Process callback to remove one level of parentage
 */
function poutine_maker_ignore_parent(&$form, &$form_state, $complete) {
  array_pop($form['#parents']);
  return $form;
}

/**
 * Implements hook_field_is_empty().
 */
function poutine_maker_field_is_empty($item, $field) {
  $isempty = TRUE;
  if (empty($item['name'])) {
    $isempty = FALSE;
  }
  if (empty($item['vegetarian'])) {
    $isempty = FALSE;
  }
  foreach (poutine_maker_toppings('machine') as $topping) {
    if (empty($item[$topping])) {
      $isempty = FALSE;
    }
  }
  return $isempty;
}

/**
 * Implements hook_field_validate().
 */
function poutine_maker_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  $title = "<strong>{$instance['label']}</strong>";

  foreach ($items as $delta => $item) {
    if (empty($item['name'])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'poutine_maker_invalid_part',
        'message' => t($title . ': You must provide a name for your poutine creation.'),
        'error_element' => array('name'),
      );
    }
    if (isset($item['sweet_potato']) && isset($item['tofu']) && $item['sweet_potato'] == 1 && $item['tofu'] == 1) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'poutine_maker_invalid_parts',
        'message' => t($title . ': Your poutine is not tasty. Please do not mix sweet potato and tofu.'),
        'error_elements' => array(array('toppings', 'sweet_potato'), array('toppings', 'tofu')),
      );
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function poutine_maker_field_widget_error($element, $error, $form, &$form_state) {
  switch($error['error']) {
  case 'poutine_maker_invalid_full':
    form_error($element, $error['message']);
    break;

  // handle the case where only one part of the widget is in error
  // this trusts 'invalid_parts' to work properly on arrays of arrays
  case 'poutine_maker_invalid_part':
    $error['error_elements'] = array($error['error_element']);

  // handle the case where many parts of the widget are in error.
  case 'poutine_maker_invalid_parts':
    $message_delivered = FALSE;
    foreach ($error['error_elements'] as $el_array) {
      $el = drupal_array_get_nested_value($element, $el_array);
      if (!$message_delivered) {
        form_error($el, $error['message']);
        $message_delivered = TRUE;
      }
      else {
        form_error($el);
      }
    }
    break;
  }
}
